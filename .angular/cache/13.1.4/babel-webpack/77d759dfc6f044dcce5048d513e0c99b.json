{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../services/authentication.service\";\nimport * as i2 from \"@ionic/angular\";\nexport let ModalPage = /*#__PURE__*/(() => {\n  class ModalPage {\n    constructor(authService, pickerController) {\n      this.authService = authService;\n      this.pickerController = pickerController;\n      this.product = null;\n    }\n\n    ngOnInit() {\n      this.authService.product(this.prodid).subscribe(result => {\n        this.product = result;\n      });\n    }\n\n    openPicker(numColumns = 1, numOptions = 5, columnOptions = ['1', '2', '3', '4', '5']) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const picker = yield this.pickerController.create({\n          columns: this.getColumns(numColumns, numOptions, columnOptions),\n          buttons: [{\n            text: 'Cancel',\n            role: 'cancel'\n          }, {\n            text: 'Confirm',\n            handler: value => {\n              console.log(`Got Value ${value}`);\n            }\n          }]\n        });\n        yield picker.present();\n      });\n    }\n\n    getColumns(numColumns, numOptions, columnOptions) {\n      let columns = [];\n\n      for (let i = 0; i < numColumns; i++) {\n        columns.push({\n          name: `col-${i}`,\n          options: this.getColumnOptions(i, numOptions, columnOptions)\n        });\n      }\n\n      return columns;\n    }\n\n    getColumnOptions(columnIndex, numOptions, columnOptions) {\n      let options = [];\n\n      for (let i = 0; i < numOptions; i++) {\n        options.push({\n          text: columnOptions[columnIndex][i % numOptions],\n          value: i\n        });\n      }\n\n      return options;\n    }\n\n  }\n\n  ModalPage.ɵfac = function ModalPage_Factory(t) {\n    return new (t || ModalPage)(i0.ɵɵdirectiveInject(i1.AuthenticationService), i0.ɵɵdirectiveInject(i2.PickerController));\n  };\n\n  ModalPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ModalPage,\n    selectors: [[\"app-modal\"]],\n    inputs: {\n      subid: \"subid\",\n      prodid: \"prodid\"\n    },\n    decls: 7,\n    vars: 2,\n    consts: [[3, \"src\"]],\n    template: function ModalPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\");\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-title\");\n        i0.ɵɵtext(3, \"modal\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-content\");\n        i0.ɵɵelement(5, \"img\", 0);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵpropertyInterpolate(\"src\", ctx.product == null ? null : ctx.product.images[0].src, i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.product == null ? null : ctx.product.name, \"\\n\");\n      }\n    },\n    directives: [i2.IonHeader, i2.IonToolbar, i2.IonTitle, i2.IonContent],\n    styles: [\"\"]\n  });\n  return ModalPage;\n})();","map":null,"metadata":{},"sourceType":"module"}