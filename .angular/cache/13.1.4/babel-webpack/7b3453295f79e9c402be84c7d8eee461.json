{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { map, tap, switchMap, catchError } from \"rxjs/operators\";\nimport { BehaviorSubject, from, throwError } from \"rxjs\";\nimport { Storage } from '@capacitor/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst TOKEN_KEY = \"my-token\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http) {\n      this.http = http;\n      this.url = \"https://hololifoods.dk/wp-json/\";\n      this.secret = \"cs_87bc1989827871fc19c2ae6d15af63e894ec212d\";\n      this.key = \"ck_faf50963dee1b3e3cca1ab77630b6f09c6a4129e\";\n      this.user = new BehaviorSubject(null); // Init with null to filter out the first value in a guard!\n\n      this.isAuthenticated = new BehaviorSubject(null);\n      this.token = \"\";\n      this.loadToken();\n    }\n\n    loadToken() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const token = yield Storage.get({\n          key: TOKEN_KEY\n        });\n        let email = localStorage.getItem(\"email\");\n\n        if (token && token.value && email) {\n          console.log(\"set token: \", token.value);\n          this.token = token.value;\n          this.isAuthenticated.next(true);\n        } else {\n          this.isAuthenticated.next(false);\n        }\n      });\n    }\n\n    login(credentials) {\n      console.log(\"1\");\n      return this.http.post(`https://hololifoods.dk/wp-json/jwt-auth/v1/token`, {\n        username: credentials.email,\n        password: credentials.password\n      }).pipe(catchError(error => {\n        console.log(\"3\");\n        return throwError(error);\n      }), map(data => data), switchMap(data => {\n        console.log(data);\n        localStorage.setItem(\"email\", data.user_email);\n        from(Storage.set({\n          key: \"email\",\n          value: JSON.stringify(data.user_email)\n        }));\n        return from(Storage.set({\n          key: TOKEN_KEY,\n          value: data.token\n        }));\n      }), tap(_ => {\n        this.isAuthenticated.next(true);\n      }));\n    }\n\n    subscription() {\n      let email = localStorage.getItem(\"email\");\n      return this.http.post(`${this.url}myplugin/v1/subscriptions`, {\n        email: email\n      });\n    }\n\n    subdetails(id) {\n      return this.http.post(`${this.url}myplugin/v1/subscription`, {\n        id: id\n      });\n    }\n\n    orderNote(id, note) {\n      return this.http.post(`${this.url}myplugin/v1/order_note`, {\n        id: id,\n        note: note\n      });\n    }\n\n    frekvens(id, interval) {\n      return this.http.post(`${this.url}myplugin/v1/frekvens`, {\n        id: id,\n        interval: interval\n      });\n    }\n\n    status(id, status) {\n      return this.http.post(`${this.url}myplugin/v1/status`, {\n        status: status,\n        subscription: id\n      });\n    }\n\n    coupon(id, coupon) {\n      return this.http.post(`${this.url}myplugin/v1/coupon`, {\n        coupon: coupon,\n        subscription: id\n      });\n    }\n\n    removeCoupon(id, coupon) {\n      return this.http.post(`${this.url}myplugin/v1/remove-coupon`, {\n        coupon: coupon,\n        subscription: id\n      });\n    }\n\n    cancelReason(id, reason) {\n      return this.http.post(`${this.url}myplugin/v1/cancel`, {\n        reason: reason,\n        \"user-id\": id\n      });\n    }\n\n    changeDate(date, subid) {\n      return this.http.post(`${this.url}myplugin/v1/date`, {\n        date: date,\n        subscription: subid\n      });\n    }\n\n    changeQuantity(id, subid, quant, name) {\n      return this.http.post(`${this.url}myplugin/v1/quantity`, {\n        quant: quant,\n        id: id,\n        subscription: subid,\n        name: name\n      });\n    }\n\n    removeProduct(id, subid, name) {\n      return this.http.post(`${this.url}myplugin/v1/remove-product`, {\n        productid: id,\n        subscription: subid,\n        name: name\n      });\n    }\n\n    products() {\n      return this.http.get(`${this.url}wc/v3/products?&consumer_key=${this.key}&consumer_secret=${this.secret}&per_page=100&status=publish`);\n    }\n\n    categories() {\n      return this.http.get(`${this.url}wc/v3/products/categories?&consumer_key=${this.key}&consumer_secret=${this.secret}&per_page=100&status=publish`);\n    }\n\n    category(id) {\n      return this.http.get(`${this.url}wc/v3/products?&consumer_key=${this.key}&consumer_secret=${this.secret}&per_page=100&status=publish&category=${id}`);\n    }\n\n    hovedret() {\n      return this.http.get(`${this.url}wc/v3/products?&consumer_key=${this.key}&consumer_secret=${this.secret}&per_page=100&status=publish&category=19`);\n    }\n\n    snacks() {\n      return this.http.get(`${this.url}wc/v3/products?&consumer_key=${this.key}&consumer_secret=${this.secret}&per_page=100&status=publish&category=29`);\n    }\n\n    drikkevarer() {\n      return this.http.get(`${this.url}wc/v3/products?&consumer_key=${this.key}&consumer_secret=${this.secret}&per_page=100&status=publish&category=23`);\n    }\n\n    familieportioner() {\n      return this.http.get(`${this.url}wc/v3/products?&consumer_key=${this.key}&consumer_secret=${this.secret}&per_page=100&status=publish&category=4774`);\n    }\n\n    morgenmad() {\n      return this.http.get(`${this.url}wc/v3/products?&consumer_key=${this.key}&consumer_secret=${this.secret}&per_page=100&status=publish&category=4646`);\n    }\n\n    paalaeg() {\n      return this.http.get(`${this.url}wc/v3/products?&consumer_key=${this.key}&consumer_secret=${this.secret}&per_page=100&status=publish&category=4756`);\n    }\n\n    glutenfri() {\n      return this.http.get(`${this.url}wc/v3/products?&consumer_key=${this.key}&consumer_secret=${this.secret}&per_page=100&status=publish&category=37`);\n    }\n\n    product(prodid) {\n      return this.http.get(`${this.url}wc/v3/products/${prodid}?&consumer_key=${this.key}&consumer_secret=${this.secret}`);\n    }\n\n    addproduct(id, prodid, quant) {\n      return this.http.post(`${this.url}myplugin/v1/addproduct`, {\n        id: id,\n        prodid: prodid,\n        quant: quant\n      });\n    }\n\n    addNote(id, note) {\n      return this.http.post(`${this.url}myplugin/v1/note`, {\n        id: id,\n        note: note\n      });\n    }\n\n    addAdresse(id, adresse) {\n      return this.http.post(`${this.url}myplugin/v1/address`, {\n        id: id,\n        adresse: adresse\n      });\n    }\n\n    orderdetails(id) {\n      return this.http.get(`${this.url}wc/v3/orders/${id}?&consumer_key=${this.key}&consumer_secret=${this.secret}`);\n    }\n\n    orders() {\n      let email = localStorage.getItem(\"email\");\n      return this.http.post(`${this.url}myplugin/v1/orders`, {\n        email: email\n      });\n    }\n\n    processingOrders() {\n      const email = localStorage.getItem(\"email\");\n      return this.http.get(`${this.url}wc/v3/orders?search=${email}&status=processing&consumer_key=${this.key}&consumer_secret=${this.secret}`);\n    }\n\n    kode(username) {\n      return this.http.get(`${this.url}wp/v2/users/lostpassword?user_login=${username}`);\n    }\n\n    kunde() {\n      const email = localStorage.getItem(\"email\");\n      return this.http.get(`https://hololifoods.dk/wc-api/v3/customers/email/${email}?consumer_key=${this.key}&consumer_secret=${this.secret}`);\n    }\n\n    customer(id) {\n      return this.http.get(`${this.url}wc/v3/customers/${id}?consumer_key=${this.key}&consumer_secret=${this.secret}`);\n    }\n\n    addKundeAdresse(id, adresse) {\n      return this.http.put(`${this.url}wc/v3/customers/${id}?consumer_key=${this.key}&consumer_secret=${this.secret}`, {\n        billing: adresse\n      });\n    }\n\n    addKundeTelefon(id, telefon) {\n      return this.http.put(`${this.url}wc/v3/customers/${id}?consumer_key=${this.key}&consumer_secret=${this.secret}`, {\n        billing: {\n          phone: telefon\n        }\n      });\n    }\n\n    addKundeEmail(id, email) {\n      return this.http.put(`${this.url}wc/v3/customers/${id}?consumer_key=${this.key}&consumer_secret=${this.secret}`, {\n        billing: {\n          email: email\n        }\n      });\n    }\n\n    logout() {\n      this.isAuthenticated.next(false);\n      console.log(\"Removed\");\n      Storage.remove({\n        key: \"email\"\n      });\n      Storage.clear();\n      return Storage.remove({\n        key: TOKEN_KEY\n      });\n    }\n\n    getCurrentUser() {\n      return this.user.asObservable();\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}