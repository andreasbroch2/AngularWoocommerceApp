{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let LoadingService = /*#__PURE__*/(() => {\n  class LoadingService {\n    constructor() {\n      this.loadingSub = new BehaviorSubject(false);\n      /**\r\n       * Contains in-progress loading requests\r\n       */\n\n      this.loadingMap = new Map();\n    }\n    /**\r\n     * Sets the loadingSub property value based on the following:\r\n     * - If loading is true, add the provided url to the loadingMap with a true value, set loadingSub value to true\r\n     * - If loading is false, remove the loadingMap entry and only when the map is empty will we set loadingSub to false\r\n     * This pattern ensures if there are multiple requests awaiting completion, we don't set loading to false before\r\n     * other requests have completed. At the moment, this function is only called from the @link{HttpRequestInterceptor}\r\n     * @param loading {boolean}\r\n     * @param url {string}\r\n     */\n\n\n    setLoading(loading, url) {\n      if (!url) {\n        throw new Error('The request URL must be provided to the LoadingService.setLoading function');\n      }\n\n      if (loading === true) {\n        this.loadingMap.set(url, loading);\n        this.loadingSub.next(true);\n      } else if (loading === false && this.loadingMap.has(url)) {\n        this.loadingMap.delete(url);\n      }\n\n      if (this.loadingMap.size === 0) {\n        this.loadingSub.next(false);\n      }\n    }\n\n  }\n\n  LoadingService.ɵfac = function LoadingService_Factory(t) {\n    return new (t || LoadingService)();\n  };\n\n  LoadingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoadingService,\n    factory: LoadingService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoadingService;\n})();","map":null,"metadata":{},"sourceType":"module"}