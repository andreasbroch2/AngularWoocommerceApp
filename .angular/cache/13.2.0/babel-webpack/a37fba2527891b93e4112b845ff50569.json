{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./loading.service\";\n/**\n * This class is for intercepting http requests. When a request starts, we set the loadingSub property\n * in the LoadingService to true. Once the request completes and we have a response, set the loadingSub\n * property to false. If an error occurs while servicing the request, set the loadingSub property to false.\n * @class {HttpRequestInterceptor}\n */\n\nexport let HttpRequestInterceptor = /*#__PURE__*/(() => {\n  class HttpRequestInterceptor {\n    constructor(_loading) {\n      this._loading = _loading;\n    }\n\n    intercept(request, next) {\n      this._loading.setLoading(true, request.url);\n\n      return next.handle(request).pipe(catchError(err => {\n        console.log('intercept - error' + err);\n\n        this._loading.setLoading(false, request.url);\n\n        return throwError(err.message);\n      })).pipe(map(evt => {\n        if (evt instanceof HttpResponse) {\n          this._loading.setLoading(false, request.url);\n        }\n\n        return evt;\n      }));\n    }\n\n  }\n\n  HttpRequestInterceptor.ɵfac = function HttpRequestInterceptor_Factory(t) {\n    return new (t || HttpRequestInterceptor)(i0.ɵɵinject(i1.LoadingService));\n  };\n\n  HttpRequestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpRequestInterceptor,\n    factory: HttpRequestInterceptor.ɵfac\n  });\n  return HttpRequestInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}